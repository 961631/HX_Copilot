<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>WinMerge File Compare Report</title>
<style>
<!--
table { table-layout: fixed; margin: 0; border: 1px solid #a0a0a0; box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.15); }
th { position: sticky; top: 0; }
td,th { word-break: break-all; font-size: 12pt; padding: 0 3px; }
tr { vertical-align: top; }
.title { font-weight: bold; color: white; background-color: blue; vertical-align: top; text-align: center; padding: 4px 4px; background: linear-gradient(mediumblue, darkblue);}
.sf3b2 {color: #000000; background-color: #ffffff; }
.sf3b5 {color: #000000; background-color: #0078d7; }
.sf3b14 {color: #000000; background-color: #ffa0a0; }
.sf3b16 {color: #000000; background-color: #f1e2ad; }
.sf3b18 {color: #000000; background-color: #ffaa82; }
.sf3b19 {color: #000000; background-color: #c8816c; }
.sf6b2 {color: #ffffff; background-color: #ffffff; }
.sf6b5 {color: #ffffff; background-color: #0078d7; }
.sf6b14 {color: #ffffff; background-color: #ffa0a0; }
.sf6b16 {color: #ffffff; background-color: #f1e2ad; }
.sf6b18 {color: #ffffff; background-color: #ffaa82; }
.sf6b19 {color: #ffffff; background-color: #c8816c; }
.sf7b2 {color: #0000ff; background-color: #ffffff; font-weight: bold; }
.sf7b5 {color: #0000ff; background-color: #0078d7; font-weight: bold; }
.sf7b14 {color: #0000ff; background-color: #ffa0a0; font-weight: bold; }
.sf7b16 {color: #0000ff; background-color: #f1e2ad; font-weight: bold; }
.sf7b18 {color: #0000ff; background-color: #ffaa82; font-weight: bold; }
.sf7b19 {color: #0000ff; background-color: #c8816c; font-weight: bold; }
.sf8b2 {color: #800080; background-color: #ffffff; }
.sf8b5 {color: #800080; background-color: #0078d7; }
.sf8b14 {color: #800080; background-color: #ffa0a0; }
.sf8b16 {color: #800080; background-color: #f1e2ad; }
.sf8b18 {color: #800080; background-color: #ffaa82; }
.sf8b19 {color: #800080; background-color: #c8816c; }
.sf9b2 {color: #008000; background-color: #ffffff; }
.sf9b5 {color: #008000; background-color: #0078d7; }
.sf9b14 {color: #008000; background-color: #ffa0a0; }
.sf9b16 {color: #008000; background-color: #f1e2ad; }
.sf9b18 {color: #008000; background-color: #ffaa82; }
.sf9b19 {color: #008000; background-color: #c8816c; }
.sf10b2 {color: #ff0000; background-color: #ffffff; }
.sf10b5 {color: #ff0000; background-color: #0078d7; }
.sf10b14 {color: #ff0000; background-color: #ffa0a0; }
.sf10b16 {color: #ff0000; background-color: #f1e2ad; }
.sf10b18 {color: #ff0000; background-color: #ffaa82; }
.sf10b19 {color: #ff0000; background-color: #c8816c; }
.sf11b2 {color: #606060; background-color: #ffffff; }
.sf11b5 {color: #606060; background-color: #0078d7; }
.sf11b14 {color: #606060; background-color: #ffa0a0; }
.sf11b16 {color: #606060; background-color: #f1e2ad; }
.sf11b18 {color: #606060; background-color: #ffaa82; }
.sf11b19 {color: #606060; background-color: #c8816c; }
.sf12b2 {color: #800000; background-color: #ffffff; }
.sf12b5 {color: #800000; background-color: #0078d7; }
.sf12b14 {color: #800000; background-color: #ffa0a0; }
.sf12b16 {color: #800000; background-color: #f1e2ad; }
.sf12b18 {color: #800000; background-color: #ffaa82; }
.sf12b19 {color: #800000; background-color: #c8816c; }
.sf13b2 {color: #0080c0; background-color: #ffffff; }
.sf13b5 {color: #0080c0; background-color: #0078d7; }
.sf13b14 {color: #0080c0; background-color: #ffa0a0; }
.sf13b16 {color: #0080c0; background-color: #f1e2ad; }
.sf13b18 {color: #0080c0; background-color: #ffaa82; }
.sf13b19 {color: #0080c0; background-color: #c8816c; }
.sf15b2 {color: #000000; background-color: #ffffff; }
.sf15b5 {color: #000000; background-color: #0078d7; }
.sf15b14 {color: #000000; background-color: #ffa0a0; }
.sf15b16 {color: #000000; background-color: #f1e2ad; }
.sf15b18 {color: #000000; background-color: #ffaa82; }
.sf15b19 {color: #000000; background-color: #c8816c; }
.sf17b2 {color: #000000; background-color: #ffffff; }
.sf17b5 {color: #000000; background-color: #0078d7; }
.sf17b14 {color: #000000; background-color: #ffa0a0; }
.sf17b16 {color: #000000; background-color: #f1e2ad; }
.sf17b18 {color: #000000; background-color: #ffaa82; }
.sf17b19 {color: #000000; background-color: #c8816c; }
.sf20b2 {color: #000080; background-color: #ffffff; }
.sf20b5 {color: #000080; background-color: #0078d7; }
.sf20b14 {color: #000080; background-color: #ffa0a0; }
.sf20b16 {color: #000080; background-color: #f1e2ad; }
.sf20b18 {color: #000080; background-color: #ffaa82; }
.sf20b19 {color: #000080; background-color: #c8816c; }
.sf21b2 {color: #0080c0; background-color: #ffffff; }
.sf21b5 {color: #0080c0; background-color: #0078d7; }
.sf21b14 {color: #0080c0; background-color: #ffa0a0; }
.sf21b16 {color: #0080c0; background-color: #f1e2ad; }
.sf21b18 {color: #0080c0; background-color: #ffaa82; }
.sf21b19 {color: #0080c0; background-color: #c8816c; }
.sf3b2i {color: #ababab; background-color: #ffffff; }
.sf3b5i {color: #005190; background-color: #0078d7; }
.sf3b14i {color: #ab6b6b; background-color: #ffa0a0; }
.sf3b16i {color: #a19774; background-color: #f1e2ad; }
.sf3b18i {color: #ab7257; background-color: #ffaa82; }
.sf3b19i {color: #865749; background-color: #c8816c; }
.sf6b2i {color: #ffffff; background-color: #ffffff; }
.sf6b5i {color: #54a4e4; background-color: #0078d7; }
.sf6b14i {color: #ffbfbf; background-color: #ffa0a0; }
.sf6b16i {color: #f5ebc8; background-color: #f1e2ad; }
.sf6b18i {color: #ffc6ab; background-color: #ffaa82; }
.sf6b19i {color: #daaa9c; background-color: #c8816c; }
.sf7b2i {color: #ababff; background-color: #ffffff; font-weight: bold; }
.sf7b5i {color: #0051e4; background-color: #0078d7; font-weight: bold; }
.sf7b14i {color: #ab6bbf; background-color: #ffa0a0; font-weight: bold; }
.sf7b16i {color: #a197c8; background-color: #f1e2ad; font-weight: bold; }
.sf7b18i {color: #ab72ab; background-color: #ffaa82; font-weight: bold; }
.sf7b19i {color: #86579c; background-color: #c8816c; font-weight: bold; }
.sf8b2i {color: #d5abd5; background-color: #ffffff; }
.sf8b5i {color: #2a51bb; background-color: #0078d7; }
.sf8b14i {color: #d56b96; background-color: #ffa0a0; }
.sf8b16i {color: #cc979f; background-color: #f1e2ad; }
.sf8b18i {color: #d57282; background-color: #ffaa82; }
.sf8b19i {color: #b15772; background-color: #c8816c; }
.sf9b2i {color: #abd5ab; background-color: #ffffff; }
.sf9b5i {color: #007a90; background-color: #0078d7; }
.sf9b14i {color: #ab966b; background-color: #ffa0a0; }
.sf9b16i {color: #a1c274; background-color: #f1e2ad; }
.sf9b18i {color: #ab9d57; background-color: #ffaa82; }
.sf9b19i {color: #868149; background-color: #c8816c; }
.sf10b2i {color: #ffabab; background-color: #ffffff; }
.sf10b5i {color: #545190; background-color: #0078d7; }
.sf10b14i {color: #ff6b6b; background-color: #ffa0a0; }
.sf10b16i {color: #f59774; background-color: #f1e2ad; }
.sf10b18i {color: #ff7257; background-color: #ffaa82; }
.sf10b19i {color: #da5749; background-color: #c8816c; }
.sf11b2i {color: #cbcbcb; background-color: #ffffff; }
.sf11b5i {color: #1f71b0; background-color: #0078d7; }
.sf11b14i {color: #cb8b8b; background-color: #ffa0a0; }
.sf11b16i {color: #c1b794; background-color: #f1e2ad; }
.sf11b18i {color: #cb9277; background-color: #ffaa82; }
.sf11b19i {color: #a67769; background-color: #c8816c; }
.sf12b2i {color: #d5abab; background-color: #ffffff; }
.sf12b5i {color: #2a5190; background-color: #0078d7; }
.sf12b14i {color: #d56b6b; background-color: #ffa0a0; }
.sf12b16i {color: #cc9774; background-color: #f1e2ad; }
.sf12b18i {color: #d57257; background-color: #ffaa82; }
.sf12b19i {color: #b15749; background-color: #c8816c; }
.sf13b2i {color: #abd5eb; background-color: #ffffff; }
.sf13b5i {color: #007ad0; background-color: #0078d7; }
.sf13b14i {color: #ab96aa; background-color: #ffa0a0; }
.sf13b16i {color: #a1c2b3; background-color: #f1e2ad; }
.sf13b18i {color: #ab9d96; background-color: #ffaa82; }
.sf13b19i {color: #868187; background-color: #c8816c; }
.sf15b2i {color: #ababab; background-color: #ffffff; }
.sf15b5i {color: #005190; background-color: #0078d7; }
.sf15b14i {color: #ab6b6b; background-color: #ffa0a0; }
.sf15b16i {color: #a19774; background-color: #f1e2ad; }
.sf15b18i {color: #ab7257; background-color: #ffaa82; }
.sf15b19i {color: #865749; background-color: #c8816c; }
.sf17b2i {color: #ababab; background-color: #ffffff; }
.sf17b5i {color: #005190; background-color: #0078d7; }
.sf17b14i {color: #ab6b6b; background-color: #ffa0a0; }
.sf17b16i {color: #a19774; background-color: #f1e2ad; }
.sf17b18i {color: #ab7257; background-color: #ffaa82; }
.sf17b19i {color: #865749; background-color: #c8816c; }
.sf20b2i {color: #ababd5; background-color: #ffffff; }
.sf20b5i {color: #0051bb; background-color: #0078d7; }
.sf20b14i {color: #ab6b96; background-color: #ffa0a0; }
.sf20b16i {color: #a1979f; background-color: #f1e2ad; }
.sf20b18i {color: #ab7282; background-color: #ffaa82; }
.sf20b19i {color: #865772; background-color: #c8816c; }
.sf21b2i {color: #abd5eb; background-color: #ffffff; }
.sf21b5i {color: #007ad0; background-color: #0078d7; }
.sf21b14i {color: #ab96aa; background-color: #ffa0a0; }
.sf21b16i {color: #a1c2b3; background-color: #f1e2ad; }
.sf21b18i {color: #ab9d96; background-color: #ffaa82; }
.sf21b19i {color: #868187; background-color: #c8816c; }
.cn {text-align: center; word-break: normal; color: #000000; background-color: #f0f0f0;}
.ln {text-align: right; word-break: normal; color: #000000; background-color: #f0f0f0;}
-->
</style>
</head>
<body>
<table style="width: 100%; border-collapse: collapse;">
<colgroup>
<col style="width: 0.5em;" />
<col style="width: calc(100% / 2 - 0.5em);" />
<col style="width: 0.5em;" />
<col style="width: calc(100% / 2 - 0.5em);" />
</colgroup>
<thead>
<tr>
<th colspan="2" class="title">C:\Users\961631\Desktop\新規技術\GithubCopilot\6.2025年度検証\C#コーディング規約.txt</th>
<th colspan="2" class="title">C:\Users\961631\Desktop\新規技術\GithubCopilot\6.2025年度検証\C#コーディング規約.md</th>
</tr>
</thead>
<tbody>
<tr>
<td class="ln"><a id="d1" href="#d1">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">C# コーディング規約</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d2" href="#d2">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">Ver 1.2</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d3" href="#d3">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[はじめに 3](#_Toc126397482)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d4" href="#d4">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[1. フォーマット 4](#_Toc126397483)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d5" href="#d5">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[1-1. スペース 4](#_Toc126397484)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d6" href="#d6">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">C#</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">コー</span><span style="color: #000000; background-color: #efcb05; ">デ</span><span class="sf17b18">ィ</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span class="sf17b16">グ規約</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">[1-2.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">イン</span><span style="color: #000000; background-color: #efcb05; ">デ</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span class="sf17b16">ト 5](#_Toc126397485)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">Ver 1.2</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[1-3. 空行 5](#_Toc126397486)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[1-4. 改行 6](#_Toc126397487)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[1-5. {} 7](#_Toc126397488)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[1-6. ファイル分け 7](#_Toc126397489)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2. 宣言 8](#_Toc126397490)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2.1. 変数 8](#_Toc126397491)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2.1.1. 共通規則 8](#_Toc126397492)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2.1.2. ローカル変数 8](#_Toc126397493)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2.1.3. メンバ変数 8](#_Toc126397494)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2.1.4. 定数 8](#_Toc126397495)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2.1.5. 型別プレフィックス一覧 9](#_Toc126397496)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">[2.2. プロパティ 11](#_Toc126397497)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d7" href="#d7">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[2.3. メソッド 11](#_Toc126397498)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d8" href="#d8">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[2.4. クラス 11](#_Toc126397499)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d9" href="#d9">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[2.5. インタフェース 12](#_Toc126397500)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d10" href="#d10">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[2.6. ネームスペース 12](#_Toc126397501)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d11" href="#d11">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[2.7. 列挙体 12](#_Toc126397502)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d12" href="#d12">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[3. 禁止事項 12](#_Toc126397503)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d13" href="#d13">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[3.1. public メンバフィールドの禁止 12](#_Toc126397504)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d14" href="#d14">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[3.2. アクセス修飾子なしの宣言の禁止 13](#_Toc126397505)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d15" href="#d15">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[3.3. コピー、ペーストの禁止 14](#_Toc126397506)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d16" href="#d16">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[3.4. コードのコメントアウトの禁止 14](#_Toc126397507)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d17" href="#d17">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">はじめに &nbsp; &nbsp;3</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">[4. 例外処理 14](#_Toc126397508)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1. &nbsp;フォーマット &nbsp; &nbsp;4</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-1. &nbsp; &nbsp;スペース &nbsp; &nbsp;4</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-2. &nbsp; &nbsp;インデント &nbsp;5</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-3. &nbsp; &nbsp;空行 &nbsp; &nbsp;5</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-4. &nbsp; &nbsp;改行 &nbsp; &nbsp;6</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-5. &nbsp; &nbsp;{} &nbsp;7</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-6. &nbsp; &nbsp;ファイル分け &nbsp; &nbsp;7</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2. &nbsp;宣言 &nbsp; &nbsp;8</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.1. &nbsp; &nbsp;変数 &nbsp; &nbsp;8</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.1.1. &nbsp;共通規則 &nbsp; &nbsp;8</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.1.2. &nbsp;ローカル変数 &nbsp; &nbsp;8</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.1.3. &nbsp;メンバ変数 &nbsp;8</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.1.4. &nbsp;定数 &nbsp; &nbsp;8</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.1.5. &nbsp;型別プレフィックス一覧 &nbsp;9</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.2. &nbsp; &nbsp;プロパティ &nbsp;11</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.3. &nbsp; &nbsp;メソッド &nbsp; &nbsp;11</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.4. &nbsp; &nbsp;クラス &nbsp;11</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.5. &nbsp; &nbsp;インタフェース &nbsp;12</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.6. &nbsp; &nbsp;ネームスペース &nbsp;12</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.7. &nbsp; &nbsp;列挙体 &nbsp;12</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">3. &nbsp;禁止事項 &nbsp; &nbsp;12</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">3.1. &nbsp; &nbsp;public メンバフィールドの禁止 &nbsp; 12</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">3.2. &nbsp; &nbsp;アクセス修飾子なしの宣言の禁止 &nbsp;13</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">3.3. &nbsp; &nbsp;コピー、ペーストの禁止 &nbsp;14</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">3.4. &nbsp; &nbsp;コードのコメントアウトの禁止 &nbsp; &nbsp;14</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">4. &nbsp;例外処理 &nbsp; &nbsp;14</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">4.1. &nbsp; &nbsp;例外とは &nbsp; &nbsp;14</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">4.2. &nbsp; &nbsp;例外処理の構文 &nbsp;15</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">4.3. &nbsp; &nbsp;例外捕捉の原則 &nbsp;16</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">4.4. &nbsp; &nbsp;例外処理における禁止事項 &nbsp; &nbsp;16</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">5. &nbsp;Disposeメソッド 20</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">5.1. &nbsp; &nbsp;マネージリソースとアンマネージリソース &nbsp;20</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">5.2. &nbsp; &nbsp;ガベージコレクタの動作 &nbsp;20</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">5.3. &nbsp; &nbsp;IDisposable インタフェース &nbsp;20</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">5.4. &nbsp; &nbsp;using ステートメント &nbsp; &nbsp;23</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">更新履歴</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">説明</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2006/10/26</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">Ver1.0作成。0.8 から、誤字脱字、誤変換を修正。Dispose 関連の説明が不十分だったものを修正。脚注を追加。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2007/12/17</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">Ver1.1 作成。全面改訂</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2008/02/14</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">Ver1.2 作成。1.1 時点で 1.0 のコーディングスタイルを引きずっていた部分を修正。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d18" href="#d18">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[4.1. 例外とは 14](#_Toc126397509)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[4.2. 例外処理の構文 15](#_Toc126397510)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[4.3. 例外捕捉の原則 16](#_Toc126397511)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[4.4. 例外処理における禁止事項 16](#_Toc126397512)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[5. Disposeメソッド 20](#_Toc126397513)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[5.1. マネージリソースとアンマネージリソース 20](#_Toc126397514)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[5.2. ガベージコレクタの動作 20](#_Toc126397515)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[5.3. IDisposable インタフェース 20](#_Toc126397516)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">[5.4. using ステートメント 23](#_Toc126397517)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">| &nbsp;| &nbsp;|</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">| --- | --- |</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">| 更新履歴 | 説明 |</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">| 2006/10/26 | Ver1.0作成。0.8 から、誤字脱字、誤変換を修正。Dispose 関連の説明が不十分だったものを修正。脚注を追加。 |</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">| 2007/12/17 | Ver1.1 作成。全面改訂 |</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">| 2008/02/14 | Ver1.2 作成。1.1 時点で 1.0 のコーディングスタイルを引きずっていた部分を修正。 |</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">はじめに</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">はじめに</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d19" href="#d19">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; C# とは Microsoft が提供する .NET Framework 上で動作する広範なアプリケーションを構築するようにデザインされた新しいプログラ<wbr>ミング言語である。C# は C、C++ を基に、より強力なオブジェクト指向プログラミング言語としてデザインされている。<wbr></span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; 本ドキュメントは C# で実装を行う上でのコーディング規約である。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d20" href="#d20">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">1</span><span style="color: #000000; background-color: #efcb05; ">.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span style="color: #000000; background-color: #efcb05; ">フォーマット</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">C# とは Microsoft が提供する </span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b18">NET</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b18">Framework 上で動作する広範なアプリケーションを構築するようにデザインされた新しいプログラ<wbr>ミング言語である。C# は C、C++ を基に、より強力なオブジェクト指向プログラミング言語としてデザインされている。<wbr></span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; </span><span style="color: #000000; background-color: #efcb05; ">本章では C# でコーディングを行う上での記述フォーマットを示す。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">1-1.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;スペース</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">本ドキュメントは C# で実装を行う上でのコーディング規約である。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; </span><span style="color: #000000; background-color: #efcb05; ">スペースは全て半角スペースとして扱う。全角スペースは使用しない。以下、ルールを<wbr>示す。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18"># </span><span style="color: #000000; background-color: #efcb05; ">フォーマット</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">本章では C# でコーディングを行う上での記述フォーマットを示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">##</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;スペース</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">スペースは全て半角スペースとして扱う。全角スペースは使用しない。以下、ルールを<wbr>示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* 演算子の前後</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* 演算子の前後</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d21" href="#d21">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">演算子の前後には基本的にスペースを入れる。ただし、インクリメント演算子（"++<wbr>"）、デクリメント演算子（"--"）は例外とする。以下、例を示す。</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">演算子の前後には基本的にスペースを入れる。ただし、インクリメント演算子（"++<wbr>"）、デクリメント演算子（"--"）は例外とする。以下、例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d22" href="#d22">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* コメントの // の直後</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* コメントの // の直後</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d23" href="#d23">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">コメント行を示す "//" の直後には必ずスペースを入れる。</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">コメント行を示す "//" の直後には必ずスペースを入れる。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d24" href="#d24">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* コメントの半角英数字と全角文字の境界</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* コメントの半角英数字と全角文字の境界</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d25" href="#d25">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">コメント内で半角英数字と全角文字が混在する場合には、半角英数字の前後にスペース<wbr>を入れる。</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">コメント内で半角英数字と全角文字が混在する場合には、半角英数字の前後にスペース<wbr>を入れる。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d26" href="#d26">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* 条件式、ループ式などの"(" の直前</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* 条件式、ループ式などの"(" の直前</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d27" href="#d27">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">条件式、ループ式などにおいて、条件をくくる "(" の直前にスペースを入れる。</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">条件式、ループ式などにおいて、条件をくくる "(" の直前にスペースを入れる。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d28" href="#d28">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* "," の後</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* "," の後</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d29" href="#d29">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">メソッド宣言の引数リスト、配列の初期化、メソッド呼び出し時の引数など、"," 区切りを行う際には、必ず "," の後にスペースを入れる。</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">メソッド宣言の引数リスト、配列の初期化、メソッド呼び出し時の引数など、"," 区切りを行う際には、必ず "," の後にスペースを入れる。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d30" href="#d30">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## インデント</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">インデントはタブ（Tab）キーを使用してつける。なお、タブ幅はVisualSt<wbr>udio.NET の既定値である、半角スペース４つ分を使用する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## 空行</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">メソッド内部での処理の切れ目などで、空行をうまく利用し可読性をあげる。以下に例<wbr>を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## 改行</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">C# は一つの式を複数の行に分けて記述することができる。式が長くなり横にスクロールさ<wbr>せなければ式全体が把握できないような場合には、可能な限り改行させて可読性を上げ<wbr>る。改行位置は処理の切れ目（メソッドの切れ目や引数の切れ目）で行う。また、改行<wbr>した 2 行目以降は 1 行目よりインデントを一つ下げる。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">なお、このルールはメソッド宣言時の引数があまりにも多い場合、条件式が長い場合な<wbr>ども同様である。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## {}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">C# では条件文や、プロパティ、クラス、インタフェース、ネームスペース、列挙体などの<wbr>スコープに {} を使用する。この {} を宣言と同一行から始める書き方があるが、これは禁止する。必ず改行して記述するこ<wbr>と。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## ファイル分け</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">ファイルは一つのファイルに複数のクラス、インタフェース、列挙体を記述せず、それ<wbr>ぞれファイルとクラス、インタフェース、列挙体が1:1 になるように作成する。また、ファイル名はクラス名、インタフェース名、列挙体名と<wbr>同じにすること。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; "># 宣言</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">本章では、変数、プロパティ、メソッドなどの宣言について記述する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## 変数</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">変数には、ローカル変数、メンバ変数、定数の３種類がある。それぞれについて説明を<wbr>行う。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">### 共通規則</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">変数を宣言する際には、種類によらず共通規則にのっとって宣言する。すべての変数名<wbr>は小文字からはじめ、単語の区切り部分で大文字にする。型プレフィックスは使用しな<wbr>い[[1]](#footnote-1)が、型プレフィックスをつけなくてもわかる<wbr>ようになるべく具体的な変数名を使用する。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">string name = "山田";</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">### ローカル変数</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">ローカル変数を宣言する際は、共通規則にのっとっていればよい。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">### メンバ変数</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">メンバ変数を宣言する際には、ローカル変数と同様の命名規則により考えた変数名のプ<wbr>レフィックスに "\_" を付与する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">private string \_name;</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">private int \_count;</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">など</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">### 定数</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">定数を宣言する場合には、その定数が何を示すかがすぐにわかるように全て大文字で記<wbr>述する。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## プロパティ</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">プロパティ名はそのプロパティによって取得できるものが、そのクラスのどのような属<wbr>性であるのかを明確にする名前付けを行い、必ず大文字で始める。例えば、社員をあら<wbr>わす Employee クラスの氏名を示すプロパティであれば FullName という名前をつける。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">なお、プロパティの get アクセサと set アクセサに限り、{} を同一行内に記述することを許可する。これらのアクセサは比較的シンプルなコードに<wbr>なることが多く、また、クラスによっては数多くのプロパティを保持することがあるた<wbr>め、通常通り改行して {} を記述するとファイルが極端に縦長になることがあるためである。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## メソッド</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">メソッド名は動詞+名詞（GetUser、SetPasswordなど）の形式で名<wbr>前付けを行う。その際、各単語の最初の文字を大文字にすること。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## クラス</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">クラス名は、ユーザ情報を示す UserInfo クラスなどのように、何のオブジェクトに対応するクラスであるのかが明確になるクラ<wbr>ス名を付与し、必ず大文字で始める。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## インタフェース</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">インタフェース名もクラス名と同様、何のインタフェースを定義するものかを明確にす<wbr>る名前付けを行い、必ず大文字で始める。また .NET Framework の共通ルールとしてインタフェースの宣言にはプレフィックス I を付与することになっているため、本ドキュメントでもこのルールを適用する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## ネームスペース</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">ネームスペースは通常プロジェクト単位で一意のものを使用する。Microsoft<wbr> の推奨では、企業名、プロジェクト名、製品名などを "." 区切りで連結したものを使用することになっており、実際にそのようなネームスペース<wbr>名を付与しているケースが多い。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## 列挙体</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">列挙体の宣言は、何を列挙するものなのか明確な名前付けを行い、サフィックスとして<wbr>列挙体であることを意味する "Enum" を付与する。また、列挙子のそれぞれに対してコメントを付与するため、１行に１つの<wbr>列挙子を記述する。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">![](data:image/x-emf;base64...)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; "># 禁止事項</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">本章では C# でコーディングを行う際の禁止事項について記述する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## public メンバフィールドの禁止</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">クラスを作成し、そのメンバ変数を作成する際に、アクセス修飾子を public にしてはいけない。同様に internal も避けるべきである。メンバフィールドは本来、クラスインスタンスの属性値を格納す<wbr>るために存在するものであり、他クラスから属性値や状態を書き換えられていいもので<wbr>はない。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">そのため、メンバフィールドに他クラスからアクセス可能にする場合には、そのフィー<wbr>ルドに対応するプロパティを作成し、get アクセサを用意して参照のみ可能にするべきである。また、インタフェース上、公開お<wbr>よび改変が可能であるべきフィールドについてもプロパティを作成し get、set の両アクセサを宣言するべきである。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">public class MyClass</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">**public bool \_isFixed; // このような宣言は禁止**</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">// 以下のようにするべき</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">public class MyClass</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">private bool \_isFixed;</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">public bool IsFixed</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">get { return \_isFixed; }</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">// 公開する必要のあるフィールドの場合</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">private int \_memberCount;</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">public int MemberCount</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">get { return \_memberCount; }</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">set { \_memberCount = value; }</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## アクセス修飾子なしの宣言の禁止</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">クラス、フィールド、プロパティ、メソッドなど、何らかの宣言を行う際に、アクセス<wbr>修飾子を指定せずに宣言をしてはいけない。アクセス修飾子を付与しないで宣言を行っ<wbr>た場合、その宣言がどこで宣言された何であるかによってアクセシビリティレベルが変<wbr>化する。そのため、アクセス修飾子なしでの宣言を行ってしまうと、アクセシビリティ<wbr>レベルが不明確になり、混乱を招くことになる。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">**class MyClass // このような宣言は禁止**</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">**{**</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">**bool \_isFixed; // このような宣言は禁止</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}**</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">// 以下のようにするべき</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">public class MyClass</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">private bool \_isFixed;</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">## コピー、ペーストの禁止</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">一度書いた処理と同様の処理を別の部分で実装する必要が出てきた場合に、コピーペー<wbr>ストを使用してはいけない。ロジックをコピーすることにより、同じコードが複数の場<wbr>所に散在することになり、コードの可読性が著しく悪化する。また、メンテナンスの際<wbr>に、コピーしたコードの一箇所でバグが発見された場合など、複数の箇所を修正する必<wbr>要が出てくる可能性がある。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">類似したロジックを記述した際には、継承やメソッドへの切り出しを利用して可能な限<wbr>り類似したロジックが散在することのないように記述する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d31" href="#d31">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">1-2.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">イ</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span class="sf17b18">デン</span><span style="color: #000000; background-color: #efcb05; ">ト</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">##</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">コードのコメ</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span style="color: #000000; background-color: #efcb05; ">ト</span><span class="sf17b16">アウ</span><span style="color: #000000; background-color: #efcb05; ">ト</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">禁止</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; インデン</span><span style="color: #000000; background-color: #efcb05; ">ト</span><span class="sf17b18">はタブ（Tab）キーを使用してつける。なお、タブ幅はVisualSt<wbr>udio.NET </span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">既定値である、半角スペース４つ分を使用する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d32" href="#d32">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">1-3. 空行</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">コード中にコ</span><span style="color: #000000; background-color: #efcb05; ">メ</span><span class="sf17b16">ントアウトしたコー</span><span style="color: #000000; background-color: #efcb05; ">ド</span><span class="sf17b16">をそ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">まま残してはいけない。また、Debug<wbr> 用など</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">自己確認用のためのコード</span><span style="color: #000000; background-color: #efcb05; ">など</span><span class="sf17b16">を一時的に残す場合には</span><span style="color: #000000; background-color: #efcb05; ">、</span><span class="sf17b16">必ず「TODO : Debug用」などのコメント</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">残</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">、</span><span style="color: #000000; background-color: #efcb05; ">あ</span><span class="sf17b16">とで削除す</span><span style="color: #000000; background-color: #efcb05; ">る。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; </span><span style="color: #000000; background-color: #efcb05; ">メ</span><span class="sf17b16">ソッ</span><span style="color: #000000; background-color: #efcb05; ">ド</span><span class="sf17b16">内部で</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">処理</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">切れ目</span><span style="color: #000000; background-color: #efcb05; ">など</span><span class="sf17b16">で</span><span style="color: #000000; background-color: #efcb05; ">、</span><span class="sf17b16">空行</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">うまく利用</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">可読性を</span><span style="color: #000000; background-color: #efcb05; ">あ</span><span class="sf17b16">げ</span><span style="color: #000000; background-color: #efcb05; ">る。</span><span class="sf17b18">以下に例<wbr>を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d33" href="#d33">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">リリースコードにコメントアウトされたコードが残っていると、それが本当は必要なの<wbr>にコメントアウトされているのか、Debug 用でコメントアウトされているのかがわからなくなる。また、バージョンアップ時など<wbr>に以前のバージョンのコードをコメントで残すようなことをすると、最新の処理がどれ<wbr>なのかわからなくなりコードの可読性が悪化する。以前のバージョンのコードを残す場<wbr>合は、その時点でのソースコードをバックアップしておくべきであり、コードをコメン<wbr>トアウトするのは間違いである。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d34" href="#d34">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-4. 改行</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; "># </span><span class="sf17b16">例外</span><span style="color: #000000; background-color: #efcb05; ">処理</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; C</span><span style="color: #000000; background-color: #efcb05; "># </span><span class="sf17b16">は一つの式を複数の行に分けて記述することができる。式が長くなり横にスクロールさ<wbr>せなければ式全体が把握できないような場合には、可能な限り改行させて可読性を上げ<wbr>る。改行位置は</span><span style="color: #000000; background-color: #efcb05; ">処理</span><span class="sf17b18">の切れ目（メソッドの切れ目や引数の切れ目）で行う。また、改行<wbr>した 2 行目以降は 1 行目よりインデントを一つ下げる。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; なお、このルールはメソッド宣言時の引数があまりにも多い場合、条件式が長い場合な<wbr>ども同様である。以下に例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d35" href="#d35">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">本章では例外処理の記述ルールについて説明する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d36" href="#d36">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1-5. {}</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">#</span><span class="sf17b18">#</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">例外</span><span style="color: #000000; background-color: #efcb05; ">と</span><span style="color: #000000; background-color: #efcb05; ">は</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; C</span><span style="color: #000000; background-color: #efcb05; ">#</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">では条件文や、プロパティ、クラス、インタフェース、ネームスペース、列挙体などの<wbr>スコープに {} を使用する。この {} を宣言</span><span style="color: #000000; background-color: #efcb05; ">と</span><span class="sf17b18">同一行から始める書き方があるが、これ</span><span style="color: #000000; background-color: #efcb05; ">は</span><span class="sf17b18">禁止する。必ず改行して記述するこ<wbr>と。以下に例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d37" href="#d37">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">例外とは、.NET の世界ではアプリケーションやシステムに何らかの想定外の障害が発生したことを表現<wbr>するものである。この「想定外の障害」とは、業務エラーとは明確に区別するべきもの<wbr>である。例えば、論理3階層（クライアント、APサーバ、DBサーバ）の構成を持つ<wbr>アプリケーションを設計・実装する際には、ネットワーク障害による DB アクセスの失敗などは予測はできても、業務的なエラーとはいえない。このようなもの<wbr>を「想定外の障害」と呼んでいる。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d38" href="#d38">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">1-6.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">ファイル分け</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">##</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">例外処理</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">構文</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; ファイルは一つ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">ファイルに複数のクラス、インタフェース、列挙体を記述せず、それ<wbr>ぞれファイルとクラス、インタフェース、列挙体が1:1 になるように作成する。また、ファイル名はクラス名、インタフェース名、列挙体名と<wbr>同じにすること。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d39" href="#d39">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2. 宣言</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">例外処理</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">は try</span><span style="color: #000000; background-color: #efcb05; ">.</span><span style="color: #000000; background-color: #efcb05; ">.</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">catch</span><span style="color: #000000; background-color: #efcb05; ">.</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b18">.finally</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">構</span><span style="color: #000000; background-color: #efcb05; ">文</span><span style="color: #000000; background-color: #efcb05; ">を</span><span style="color: #000000; background-color: #efcb05; ">使用する。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 本章では、変数、プロパティ、メソッドなどの宣言</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">ついて記述する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b18">1</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b18">&nbsp;変数</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; 変数には、ローカル変数、メンバ変数、定数の３種類がある。それぞれについて説明を<wbr>行う。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">1</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b18">1</span><span style="color: #000000; background-color: #efcb05; ">.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">共通規則</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 変数を宣言する際には、種類によらず共通規則にのっとって宣言する。すべての変数名<wbr>は小</span><span style="color: #000000; background-color: #efcb05; ">文</span><span class="sf17b18">字からはじめ、単語の区切り部分で大文字にする。型プレフィックスは使用しな<wbr>い1が、型プレフィックス</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b18">つけなくてもわかるようになるべく具体的な変数名を</span><span style="color: #000000; background-color: #efcb05; ">使用<wbr>する。以下に例を示す。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d40" href="#d40">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">try</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d41" href="#d41">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.1.2.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">ローカル変数</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">{</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">// 例外発生が予想でき</span><span style="color: #000000; background-color: #efcb05; ">る</span><span class="sf17b16">処理を記述</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; ローカル変数を宣言す</span><span style="color: #000000; background-color: #efcb05; ">る</span><span class="sf17b16">際は、共通規則にのっとっていればよい。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d42" href="#d42">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.1.3. メンバ変数</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; メンバ変数を宣言する際には、ローカル変数と同様の命名規則により考えた変数名のプ<wbr>レフィックスに "_" を付与する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d43" href="#d43">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">catch (InvalidCastException ex)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d44" href="#d44">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.1.4.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">定数</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">{</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">// InvalidCastException が発生した</span><span style="color: #000000; background-color: #efcb05; ">場合</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">復帰処理</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 定数を宣言する</span><span style="color: #000000; background-color: #efcb05; ">場合</span><span class="sf17b18">には、そ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">定数が何を示すかがすぐにわかるように全て大文字で記<wbr>述する。以下に例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d45" href="#d45">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; </span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2.2. プロパティ</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; プロパティ名はそのプロパティによって取得できるものが、そのクラスのどのような属<wbr>性であるのかを明確にする名前付けを行い、必ず大文字で始める。例えば、社員をあら<wbr>わす Employee クラスの氏名を示すプロパティであれば FullName という名前をつける。以下に例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d46" href="#d46">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">catch (NullReferenceException ex)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{ // NullReferenceException が発生した場合の復帰処理</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d47" href="#d47">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; なお、プロパティの get アクセサと set アクセサに限り、{</span><span style="color: #000000; background-color: #efcb05; ">}</span><span class="sf17b18">&nbsp;を同一行内に記述することを許可する。これらのアクセサは比較的シンプルなコードに<wbr>なることが多く、また、クラスによっては数多くのプロパティを保持することがあるた<wbr>め、通常通り改行して {} を記述するとファイルが極端に縦長になることがあるためである。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d48" href="#d48">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.3.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">メソッド</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">catch</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">(Exception ex)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; メソッド名は動詞+名詞（GetUser、SetPasswordなど）の形式で名<wbr>前付けを行う。その際、各単語の最初の文字を大文字にすること。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d49" href="#d49">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.4.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">クラス</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">{</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">//</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">System.Exception</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">派生</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">全て</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">例外</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">捕捉</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; クラス名は、ユーザ情報を示す</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">UserInfo</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">クラスなど</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">ように、何</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">オブジェクトに対応するクラスであるのかが明確になるクラ<wbr>ス名</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">付与し、必ず大文字で始める。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d50" href="#d50">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.5. インタフェース</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; インタフェース名もクラス名と同様、何のインタフェースを定義するものかを明確にす<wbr>る名前付けを行い、必ず大文字で始める。また .NET Framework の共通ルールとしてインタフェースの宣言にはプレフィックス I を付与することになっているため、本ドキュメントでもこのルールを適用する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d51" href="#d51">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.6. ネームスペース</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">finally</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; ネームスペースは通常プロジェクト単位で一意のものを使用する。Microsoft<wbr> の推奨では、企業名、プロジェクト名、製品名などを "." 区切りで連結したものを使用することになっており、実際にそのようなネームスペース<wbr>名を付与しているケースが多い。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d52" href="#d52">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">2.7.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">列挙体</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">{</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">// try ブロ</span><span style="color: #000000; background-color: #efcb05; ">ック</span><span class="sf17b16">中</span><span style="color: #000000; background-color: #efcb05; ">で</span><span class="sf17b16">行っ</span><span style="color: #000000; background-color: #efcb05; ">た</span><span class="sf17b16">処理</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">クリー</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span class="sf17b16">アップ処理</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 列挙体の宣言は、何を列挙するものなのか明確な名前付けを行い、サフィ</span><span style="color: #000000; background-color: #efcb05; ">ック</span><span class="sf17b16">スとして<wbr>列挙体</span><span style="color: #000000; background-color: #efcb05; ">で</span><span class="sf17b16">あることを意味する "Enum" を付与する。ま</span><span style="color: #000000; background-color: #efcb05; ">た</span><span class="sf17b16">、列挙子</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">それぞれに対してコメ</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span class="sf17b16">トを付与するため、１行に１つの<wbr>列挙子を記述する。以下に例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d53" href="#d53">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">// このブロックのコードは例外発生の有無にかかわらず</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d54" href="#d54">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">3.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">禁止事項</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">//</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">常</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">実行さ</span><span style="color: #000000; background-color: #efcb05; ">れ</span><span style="color: #000000; background-color: #efcb05; ">る</span><span style="color: #000000; background-color: #efcb05; ">。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 本章では C# でコーディングを行う際の禁止事項</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">ついて記述する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">3.1. public メンバフィールドの禁止</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; クラスを作成し、そのメンバ変数を作成する際に、アクセス修飾子を public にしてはいけない。同様に internal も避けるべきである。メンバフィールドは本来、クラスインスタンスの属性値を格納す<wbr>るために存在するものであり、他クラスから属性値や状態を書き換えら</span><span style="color: #000000; background-color: #efcb05; ">れ</span><span class="sf17b18">ていいもので<wbr>はない。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; そのため、メンバフィールドに他クラスからアクセス可能にす</span><span style="color: #000000; background-color: #efcb05; ">る</span><span class="sf17b18">場合には、そのフィー<wbr>ルドに対応するプロパティを作成し、get アクセサを用意して参照のみ可能にするべきである</span><span style="color: #000000; background-color: #efcb05; ">。</span><span class="sf17b18">また、インタフェース上、公開お<wbr>よび改変が可能であるべきフィールドについてもプロパティを作成し get、set の両アクセサを宣言するべきである。以下に例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d55" href="#d55">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d56" href="#d56">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">なお、この構文にはいくつか注意点がある。以下に記す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d57" href="#d57">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">1. try ブロックでは 例外が発生する可能性のある場所のみを囲む</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d58" href="#d58">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">3.2. アクセス修飾子</span><span style="color: #000000; background-color: #efcb05; ">な</span><span class="sf17b16">しの宣言の禁止</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">余分</span><span style="color: #000000; background-color: #efcb05; ">な</span><span class="sf17b16">範囲</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">含めると</span><span style="color: #000000; background-color: #efcb05; ">、</span><span class="sf17b16">他</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">場所</span><span style="color: #000000; background-color: #efcb05; ">で</span><span class="sf17b16">発生</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">た例外</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">も捕捉し</span><span style="color: #000000; background-color: #efcb05; ">てしまう</span><span class="sf17b16">可能性</span><span style="color: #000000; background-color: #efcb05; ">が</span><span class="sf17b16">あ</span><span style="color: #000000; background-color: #efcb05; ">る</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; クラス、フィールド、プロパティ、メソッドなど、何らかの宣言</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">行う際に</span><span style="color: #000000; background-color: #efcb05; ">、</span><span class="sf17b16">アクセス<wbr>修飾子を指定せずに宣言をしてはいけない。アクセス修飾子を付与しないで宣言を行っ<wbr>た場合、そ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">宣言がどこ</span><span style="color: #000000; background-color: #efcb05; ">で</span><span class="sf17b16">宣言された何であるかによってアクセシビリティレベルが変<wbr>化する。そのため、アクセス修飾子な</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">での宣言</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">行っ</span><span style="color: #000000; background-color: #efcb05; ">てしまう</span><span class="sf17b16">と、アクセシビリティ<wbr>レベル</span><span style="color: #000000; background-color: #efcb05; ">が</span><span class="sf17b16">不明確になり、混乱を招くことにな</span><span style="color: #000000; background-color: #efcb05; ">る</span><span class="sf17b18">。以下に例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d59" href="#d59">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">1. catch ブロックでは正常処理フローに戻したい例外のみを指定する</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d60" href="#d60">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">3.3. コピー、ペーストの禁止</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">発</span><span class="sf17b16">生</span><span style="color: #000000; background-color: #efcb05; ">する</span><span style="color: #000000; background-color: #efcb05; ">可能性がある</span><span class="sf17b16">例外</span><span style="color: #000000; background-color: #efcb05; ">の</span><span style="color: #000000; background-color: #efcb05; ">中</span><span style="color: #000000; background-color: #efcb05; ">で</span><span style="color: #000000; background-color: #efcb05; ">、</span><span class="sf17b16">正常</span><span style="color: #000000; background-color: #efcb05; ">処理</span><span class="sf17b16">に戻</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">た</span><span style="color: #000000; background-color: #efcb05; ">い</span><span style="color: #000000; background-color: #efcb05; ">例外</span><span class="sf17b16">以</span><span style="color: #000000; background-color: #efcb05; ">外</span><span class="sf17b16">も捕捉し</span><span style="color: #000000; background-color: #efcb05; ">て</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">まわ</span><span style="color: #000000; background-color: #efcb05; ">な</span><span style="color: #000000; background-color: #efcb05; ">い<wbr></span><span style="color: #000000; background-color: #efcb05; ">よう</span><span class="sf17b16">に注意す</span><span style="color: #000000; background-color: #efcb05; ">る。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; 一度書いた処理と同様の処理を別の部分で実装する必要が出てきた場合に、コピーペー<wbr>ストを使用してはいけない。ロジックをコピーすることにより、同じコードが複数の場<wbr>所に散在することになり、コードの可読性が著しく悪化する。また、メンテナンスの際<wbr>に、コピーしたコードの一箇所でバグが</span><span style="color: #000000; background-color: #efcb05; ">発</span><span class="sf17b16">見された場合など、複数の箇所を修正</span><span style="color: #000000; background-color: #efcb05; ">する</span><span class="sf17b18">必<wbr>要が出てくる</span><span style="color: #000000; background-color: #efcb05; ">可能性がある</span><span class="sf17b16">。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 類似したロジックを記述した際には、継承やメソッドへ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b18">切り出しを利用して可能な限<wbr>り類似したロジックが散在することのないように記述する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; </span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">3.4. コードのコメントアウトの禁止</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; コード</span><span style="color: #000000; background-color: #efcb05; ">中</span><span class="sf17b18">にコメントアウトしたコードをそのまま残してはいけない。また、Debug<wbr> 用などの自己確認用のためのコードなどを一時的に残す場合には、必ず「TODO : Debug用」などのコメントを残し、あと</span><span style="color: #000000; background-color: #efcb05; ">で</span><span class="sf17b18">削除する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; リリースコードにコメントアウトされたコードが残っていると</span><span style="color: #000000; background-color: #efcb05; ">、</span><span class="sf17b16">それが本当は必要なの<wbr>にコメントアウトされているのか、Debug 用でコメントアウトされているのかがわからなくなる。また、バージョンアップ時など<wbr>に以前のバージョンのコードをコメントで残すようなことをすると、最新の</span><span style="color: #000000; background-color: #efcb05; ">処理</span><span class="sf17b16">がどれ<wbr>なのかわからなくなりコードの可読性が悪化する。以前のバージョンのコードを残す場<wbr>合は、その時点でのソースコードをバックアップ</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">ておくべきであり、コードをコメン<wbr>トアウトするのは間違</span><span style="color: #000000; background-color: #efcb05; ">い</span><span class="sf17b18">である。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">4. </span><span style="color: #000000; background-color: #efcb05; ">例外</span><span class="sf17b16">処理</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 本章では例</span><span style="color: #000000; background-color: #efcb05; ">外</span><span class="sf17b16">処理の記述ルールについ</span><span style="color: #000000; background-color: #efcb05; ">て</span><span class="sf17b18">説明する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">4.1. 例外とは</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; 例外とは、.NET の世界ではアプリケーションやシステムに何らかの想定外の障害が発生</span><span style="color: #000000; background-color: #efcb05; ">し</span><span class="sf17b16">たことを表現<wbr>するものである。この「想定外の障害」とは、業務エラーとは明確に区別するべきもの<wbr>である。例えば、論理3階層（クライアント、APサーバ、DBサーバ）の構成を持つ<wbr>アプリケーションを設計・実装する際には、ネットワーク障害による DB アクセスの失敗</span><span style="color: #000000; background-color: #efcb05; ">な</span><span class="sf17b18">どは予測はできても、業務的なエラーとは</span><span style="color: #000000; background-color: #efcb05; ">い</span><span class="sf17b18">えない。この</span><span style="color: #000000; background-color: #efcb05; ">よう</span><span class="sf17b16">なもの<wbr>を「想定外の障害」と呼んでい</span><span style="color: #000000; background-color: #efcb05; ">る。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d61" href="#d61">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">4</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b18">2.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b18">例外処理の構文</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">1</span><span style="color: #000000; background-color: #efcb05; ">.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span style="color: #000000; background-color: #efcb05; ">catch</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">ブロックは上から順</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">実行される</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">　例外処理には try...</span><span style="color: #000000; background-color: #efcb05; ">catch</span><span class="sf17b18">...finally</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">構文を使用する。以下</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">例を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d62" href="#d62">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; なお、この構文にはいくつか注意点がある。以下に記す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">catch ブロック</span><span style="color: #000000; background-color: #efcb05; ">は</span><span style="color: #000000; background-color: #efcb05; ">上から順に実行される</span><span style="color: #000000; background-color: #efcb05; ">ため、一番上に例外の既定クラス Exception を catch するコードを記述してはならない。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">① try ブロックでは 例外が発生する可能性のある場所のみを囲む</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">　余分な範囲を含めると、他の場所で発生した例外をも捕捉してしまう可能性がある</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">② </span><span style="color: #000000; background-color: #efcb05; ">catch ブロック</span><span class="sf17b18">で</span><span style="color: #000000; background-color: #efcb05; ">は</span><span class="sf17b18">正常処理フローに戻したい例外のみを指定する</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">　発生する可能性がある例外の中で、正常処理に戻したい例外以外も捕捉してしまわな<wbr>いように注意する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">③ catch ブロックは</span><span style="color: #000000; background-color: #efcb05; ">上から順に実行される</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">　catch ブロックは上から順に実行される</span><span style="color: #000000; background-color: #efcb05; ">ため、一番上に例外の既定クラス Exception を catch するコードを記述してはならない。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d63" href="#d63">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">4.3.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;例外捕捉の原則</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">##</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;例外捕捉の原則</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; </span><span style="color: #000000; background-color: #efcb05; ">.NET の例外処理にはいくつかの原則がある。以下に記す。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">.NET の例外処理にはいくつかの原則がある。以下に記す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">* 例外は発生箇所での捕捉を行わず集約例外ハンドラ[[2]](#footnote-<wbr>2)で捕捉する。（例外あり）</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">.NET においては全てのエラーが例外オブジェクトとなって、その上部構造（メソッドの呼び<wbr>出し元など）に通知される。例外とは「想定外の障害」であるはずなので、発生元を障<wbr>害発生前に特定しておくのは困難である。そのため、基本はアプリケーション全体の集<wbr>約例外ハンドラで捕捉することになる。ただし、以下に述べるようにこの原則に当ては<wbr>まらず、個別に処理すべきものもある。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d64" href="#d64">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">* 例外は発生箇所での捕捉を行わず集約例外ハンドラ2で捕捉する。（例外あり）</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">　.NET においては全てのエラーが例外オブジェクトとなって、その上部構造（メソッドの呼び<wbr>出し元など）に通知される。例外とは「想定外の障害」であるはずなので、発生元を障<wbr>害発生前に特定しておくのは困難である。そのため、基本はアプリケーション全体の集<wbr>約例外ハンドラで捕捉することになる。ただし、以下に述べるようにこの原則に当ては<wbr>まらず、個別に処理すべきものもある。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">　</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* 捕捉する例外の条件</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* 捕捉する例外の条件</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d65" href="#d65">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; 例外処理の構文を用いて、個別に捕捉するべき例外とは、以下の条件を満たすものであ<wbr>る。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">A) その発生が十分予想されている</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">B) その際に行うべき対処方法が完全に明確化されている</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">C) 業務フロー的にみて、正常なフロールートに引き戻す必要がある場合</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; 例外処理の構文は、業務フローを調整するものとして使用する。その場合、上記3条件<wbr>を満たさない例外を捕捉するとアプリケーションとして異常な値を入力されているのに<wbr>もかかわらずそのまま処理が続行されてしまうなどの恐れもある。そのため、個別に例<wbr>外を捕捉する場合には、十分な注意が必要である。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d66" href="#d66">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">4</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">4</span><span style="color: #000000; background-color: #efcb05; ">. </span><span style="color: #000000; background-color: #efcb05; ">例外処理</span><span style="color: #000000; background-color: #efcb05; ">に</span><span style="color: #000000; background-color: #efcb05; ">おける禁止事項</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">例外処理の構文を用いて、個別に捕捉するべき例外とは、以下の条件を満たすものであ<wbr>る。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; </span><span style="color: #000000; background-color: #efcb05; ">以下、例外処理における禁止事項を記述する。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">* 1</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">&nbsp;その発生が十分予想されている</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 2</span><span style="color: #000000; background-color: #efcb05; ">. </span><span class="sf17b18">その際に行うべき対処方法が完全に明確化されている</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; 3. 業務フロー的にみて、正常なフロールートに引き戻す必要がある場合</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">例外処理</span><span class="sf17b18">の構文は、業務フローを調整するものとして使用する。その場合、上記3条件<wbr>を満たさない例外を捕捉するとアプリケーションとして異常な値を入力されているの</span><span style="color: #000000; background-color: #efcb05; ">に<wbr></span><span class="sf17b18">もかかわらずそのまま処理が続行されてしまうなどの恐れもある。そのため、個別に例<wbr>外を捕捉する場合には、十分な注意が必要である。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">## 例外処理に</span><span style="color: #000000; background-color: #efcb05; ">おける禁止事項</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">以下、例外処理における禁止事項を記述する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* throw ex; の禁止</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* throw ex; の禁止</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d67" href="#d67">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; catch 句では catch した例外を再スローすることができる。その際、catch した例外オブジェクトを throw ex; としてスローした場合、例外の発生位置がリセットされてしまうため、これを禁止する<wbr>。以下に例を示す。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d68" href="#d68">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">catch 句では catch した例外を再スローすることができる。その際、catch した例外オブジェクトを throw ex; としてスローした場合、例外の発生位置がリセットされてしまうため、これを禁止する<wbr>。以下に例を示す。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">private XmlNode GetNode(string path)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">try</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">XmlNode node = node.OwnerXml.Document.SelectSingleNode<wbr>(path);</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">catch (XPathException ex)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{ // 本来 SelectSingleNodeメソッドで発生した例外が GetNode メソッドで</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d69" href="#d69">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 上記の例では</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b18">CLR3 で定義されている XmlNode クラスの SelectSingleNode メソッドを呼びだし、そこで</span><span style="color: #000000; background-color: #efcb05; ">発生した</span><span class="sf17b18">例外を throw しているように見えるが、実際には</span><span style="color: #000000; background-color: #efcb05; ">こ</span><span class="sf17b18">のようにする</span><span style="color: #000000; background-color: #efcb05; ">と</span><span class="sf17b18">&nbsp;XPathException の発生元が GetNode メソッドで発生したよう</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">通知され</span><span style="color: #000000; background-color: #efcb05; ">てしまう。</span><span class="sf17b18">そのため、捕捉した例外を再スローする<wbr>ためには、以下のように記述する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">//</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span style="color: #000000; background-color: #efcb05; ">発生した</span><span style="color: #000000; background-color: #efcb05; ">こ</span><span style="color: #000000; background-color: #efcb05; ">と</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">なっ</span><span style="color: #000000; background-color: #efcb05; ">てしまう。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d70" href="#d70">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">**throw ex;**</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">上記の例では CLR[[3]](#footnote-3) で定義されている XmlNode クラスの SelectSingleNode メソッドを呼びだし、そこで発生した例外を throw しているように見えるが、実際にはこのようにすると XPathException の発生元が GetNode メソッドで発生したように通知されてしまう。そのため、捕捉した例外を再スローする<wbr>ためには、以下のように記述する。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">private XmlNode GetNode(string path)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">try</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">XmlNode node = node.OwnerXml.Document.SelectSingleNode<wbr>(path);</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">catch (XPathException ex)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">// こうすると、例外の発生位置がリセットされない</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">**throw;**</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* catch (Exception ex) の禁止</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">* catch (Exception ex) の禁止</span></code></td>
</tr>
<tr>
<td class="ln"><a id="d71" href="#d71">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; catch 句は catch する例外の種類を特定して、指定した例外の場合のみ処理をフローに戻す際に使用する<wbr>。あらゆる .NET 定義の例外クラスは 全てSystem.Exception クラスから派生しており、catch (Exception) と記述すると全ての例外を catch してしまうことになる。この「全ての例外」の中には、StackOverflowE<wbr>xception, OutOfMemoryException などといった、システムとして致命的な例外も含まれる。これらの例外は捕捉は可能だ<wbr>が、それ以降の復帰処理が正常に動く保証はなく（アプリケーション全体がダウンする<wbr>可能性があるため）、前述の捕捉する例外の条件 c （正常なフローに引き戻す必要がある場合）に記述されているように、正常なフローに<wbr>引き戻すようなことは、致命的な問題を隠蔽することになるため絶対にできない。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">　このように、起こりうる全ての例外に対処法を決定することは困難であり、また、そ<wbr>れら全てに同じ処理を適用できるものでもない。そのため、catch (Exception ex) という catch 句の記述は禁止する。以下に例を示す。</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d72" href="#d72">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">5</span><span style="color: #000000; background-color: #efcb05; ">.</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">Disposeメソッド</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">catch 句は catch する例外の種類を特定して、指定した例外の場合のみ処理をフローに戻す際に使用する<wbr>。あらゆる </span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b18">NET</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">定義の例外クラスは 全てSystem.Exception クラスから派生しており、catch (Exception) と記述すると全ての例外を catch してしまうことになる。この「全ての例外」の中には、StackOverflowE<wbr>xception, OutOfMemoryException などといった、システムとして致命的な例外も含まれる。これらの例外は捕捉は可能だ<wbr>が、それ以降の復帰処理が正常に動く保証はなく（アプリケーション全体がダウンする<wbr>可能性があるため）、前述の捕捉する例外の条件 c （正常なフローに引き戻す必要がある場合）に記述されているように、正常なフローに<wbr>引き戻すようなことは、致命的な問題を隠蔽することになるため絶対にできない。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; .NET Framework のガベージコレクタ4はマネージリソースに対する解放処理を自動で行う。しかし、ア<wbr>ンマネージリソースに対しては明示的にそのリソースに対する参照が破棄されたことを<wbr>通知しなければ解放処理が行われない。本章ではアンマネージリソースの破棄を明示的<wbr>に通知するための Disposeメソッドとその利用方法を示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">このように、起こりうる全ての例外に対処法を決定することは困難であり、また、それ<wbr>ら全てに同じ処理を適用できるものでもない。そのため、catch (Exception ex) という catch 句の記述は禁止する。以下に例を示す。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">using System;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">using System.IO;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">public class MyClass</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">public void Open(path)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">FileStream fs;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">try</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{ // ファイルを指定して１バイト分読み取る</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">fs = new FileStream(path, FileMode.Open)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">fs.ReadByte();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">**catch (Exception ex)**</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">**{ // こう記述すると StackOverflowException などの**</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">**// 致命的な例外も隠蔽されてしまう。**</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">**}**</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">finally</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{ // クリーンアップ処理</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">if (fs != null)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{ // fs.ReadByte();に失敗し、例外が</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">// throw される場合もファイルは閉じる。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">fs.Close();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18"># Disposeメソッド</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">.NET Framework のガベージコレクタ[[4]](#footnote-4)はマネージリソースに対す<wbr>る解放処理を自動で行う。しかし、アンマネージリソースに対しては明示的にそのリソ<wbr>ースに対する参照が破棄されたことを通知しなければ解放処理が行われない。本章では<wbr>アンマネージリソースの破棄を明示的に通知するための Disposeメソッドとその利用方法を示す。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">## マネージリソースとアンマネージリソース</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">.NET Framework が提供する共通言語ランタイム上で作成、管理されオブジェクトの破棄、がガベージコ<wbr>レクタによって自動で行われるリソースのことをマネージリソースと呼ぶ。それに対し<wbr>、OS が管理しているリソース（ファイルハンドル、ウィンドウハンドル、ミューテックスな<wbr>ど）のことをアンマネージリソースと呼ぶ。アンマネージリソースは .NET Framework 上で作成、管理されるオブジェクトではないため、ガベージコレクタはこのリソースの<wbr>解放をサポートしていない。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">## ガベージコレクタの動作</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">C# などの CLR上で動作する言語はマネージリソースと、アンマネージリソースをカプセル化す<wbr>るクラスのオブジェクトをインスタンス化し、使用する。オブジェクトがインスタンス<wbr>化される際、CLR はマネージヒープと呼ばれる連続したアドレス空間に領域を確保する。ガベージコレク<wbr>タはこのマネージヒープ内でオブジェクトの世代管理を行い、もっとも新しい世代に属<wbr>するオブジェクトの中で、参照（ポインタ）が到達不可能になっているものからメモリ<wbr>領域の自動解放を行う。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">この動作についてはアンマネージリソースをカプセル化しているオブジェクトについて<wbr>も同様に行われるが、ガベージコレクタはアンマネージリソースそのものの存在を認識<wbr>できず、オブジェクトに対する参照が残っているためこれをカプセル化するオブジェク<wbr>トについてもメモリ領域を解放できない。この結果マネージヒープにゴミがたまり、O<wbr>utOfMemoryException（マネージヒープにこれ以上オブジェクトが<wbr>作成できない場合に発生する例外）などの致命的な例外が発生する。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">このような事態を避けるため、FCL[[5]](#footnote-5)内のアン<wbr>マネージリソースをカプセル化している全てのクラスにはアンマネージリソースへの参<wbr>照を明示的に破棄する Dispose メソッドが実装されている。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">## IDisposable インタフェース</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">IDisposable インタフェースは前述の Dispose メソッドを定義するインタフェースであり、このメソッドを使用してアンマネージリソ<wbr>ースへの参照を明示的に破棄することができる。すなわち、FCL 内のアンマネージリソースをカプセル化している全てのクラスはこのインタフェースを<wbr>実装していることになる。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">この IDisposable インタフェースを実装するクラスをデータアクセスを例にとって使用例を以下に示す。<wbr></span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">public class MyClass</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">public ArrayList GetData(string conString)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">ArrayList list= new ArrayList();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">SqlConnection con;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">SqlCommand cmd;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">SqlDataReader rs;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">try</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">// Conneciton Open</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">con = new SqlConnection(conString);</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">con.Open();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">// Command 作成</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">cmd = con.CreateCommand();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">cmd.CommandText = "xxx";</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">rs = cmd.ExecuteReader();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">while (rs.Read )</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">list.Add(rs.GetValue(0));</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">catch (SqlException ex){ // 例外処理 }</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">finally</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">if (rs != null)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">rs.Dispose();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">if (cmd != null)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">cmd.Dispose();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">if (con != null)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">con.Close();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">上記のように、IDisposable インタフェースを実装するクラスのオブジェクトを使用する際には、例外処理の構文を<wbr>用い、必ず Dispose または Close メソッドを明示的に呼び出すように実装する必要がある。このため、使用した事のない<wbr>クラスを使用する際には、そのクラスが IDisposable インタフェースを実装しているかどうかを必ずチェックすること。なお、そのクラスが<wbr> IDisposable インタフェースを実装していなくても親クラスが実装し、そこから派生している場合も<wbr>あるので注意すること。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">## using ステートメント</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">前述の Dispose メソッドを使用した記述パターンは、Dispose メソッドを呼び忘れたり、null チェックのし忘れによる別の例外（NullReferenceException）<wbr>の発生する可能性をはらんでいたりと、コーディングミスが起こりやすい記述方法であ<wbr>る。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">Dispose の呼び出しをより確実なものとするために C# には強制的に Dispose を呼び出させるためのステートメントが存在する。それが using ステートメントである。5.3で使用したサンプルコードを using ステートメントを使用して書き直した例を以下に示す。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">public class MyClass</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">public ArrayList GetData(string conString)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">using (SqlConnection con = new SqlConnection(conString))</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">con.Open();</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">using (SqlCommand cmd = con.CreateCommand())</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">cmd.CommandText = "xxx";</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">using (SqlDataReader rs =</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">cmd.ExecuteReader))</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">while (rs.Read)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">{ // 処理</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d73" href="#d73">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">5.1. マネージリソースとアンマネージリソース</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; .NET Framework が提供する共通言語ランタイム上で作成、管理されオブジェクトの破棄、がガベージコ<wbr>レクタによって自動で行われるリソースのことをマネージリソースと呼ぶ。それに対し<wbr>、OS が管理しているリソース（ファイルハンドル、ウィンドウハンドル、ミューテックスな<wbr>ど）のことをアンマネージリソースと呼ぶ。アンマネージリソースは .NET Framework 上で作成、管理されるオブジェクトではないため、ガベージコレクタはこのリソースの<wbr>解放をサポートしていない。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d74" href="#d74">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">5.2. ガベージコレクタの動作</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; C# などの CLR上で動作する言語はマネージリソースと、アンマネージリソースをカプセル化す<wbr>るクラスのオブジェクトをインスタンス化し、使用する。オブジェクトがインスタンス<wbr>化される際、CLR はマネージヒープと呼ばれる連続したアドレス空間に領域を確保する。ガベージコレク<wbr>タはこのマネージヒープ内でオブジェクトの世代管理を行い、もっとも新しい世代に属<wbr>するオブジェクトの中で、参照（ポインタ）が到達不可能になっているものからメモリ<wbr>領域の自動解放を行う。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; この動作についてはアンマネージリソースをカプセル化しているオブジェクトについて<wbr>も同様に行われるが、ガベージコレクタはアンマネージリソースそのものの存在を認識<wbr>できず、オブジェクトに対する参照が残っているためこれをカプセル化するオブジェク<wbr>トについてもメモリ領域を解放できない。この結果マネージヒープにゴミがたまり、O<wbr>utOfMemoryException（マネージヒープにこれ以上オブジェクトが<wbr>作成できない場合に発生する例外）などの致命的な例外が発生する。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; このような事態を避けるため、FCL5内のアンマネージリソースをカプセル化してい<wbr>る全てのクラスにはアンマネージリソースへの参照を明示的に破棄する Dispose メソッドが実装されている。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d75" href="#d75">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">5.3. IDisposable インタフェース</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; IDisposable インタフェースは前述の Dispose メソッドを定義するインタフェースであり、このメソッドを使用してアンマネージリソ<wbr>ースへの参照を明示的に破棄することができる。すなわち、FCL 内のアンマネージリソースをカプセル化している全てのクラスはこのインタフェースを<wbr>実装していることになる。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; この IDisposable インタフェースを実装するクラスをデータアクセスを例にとって使用例を以下に示す。<wbr></span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d76" href="#d76">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 上記のように、IDisposable インタフェースを実装するクラスのオブジェクトを使用する際には、例外処理の構文を<wbr>用い、必ず Dispose または Close メソッドを明示的に呼び出すように実装する必要がある。このため、使用した事のない<wbr>クラスを使用する際には、そのクラスが IDisposable インタフェースを実装しているかどうかを必ずチェックすること。なお、そのクラスが<wbr> IDisposable インタフェースを実装していなくても親クラスが実装し、そこから派生している場合も<wbr>あるので注意すること。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d77" href="#d77">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">5.4. using ステートメント</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; 前述の Dispose メソッドを使用した記述パターンは、Dispose メソッドを呼び忘れたり、null チェックのし忘れによる別の例外（NullReferenceException）<wbr>の発生する可能性をはらんでいたりと、コーディングミスが起こりやすい記述方法であ<wbr>る。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">　Dispose の呼び出しをより確実なものとするために C# には強制的に Dispose を呼び出させるためのステートメントが存在する。それが using ステートメントである。5.3で使用したサンプルコードを using ステートメントを使用して書き直した例を以下に示す。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d78" href="#d78">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 上記のように記述すると using ステートメントの（）でインスタンス化したオブジェクトはスコープを外れた瞬間に自<wbr>動的に Dispose メソッドが呼び出され参照が破棄されるようになる。これは .NETFramework1.1 の段階では C# のみの機能6である。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; コンパイラは using ステートメントを発見すると自動的に Dispose を意味する IL7 命令を生成するため、実行結果は例外処理構文を使用した場合とまったく同じになる。<wbr>IDisposable インタフェースを実装するクラスを使用するときには必ず using ステートメントを使用して実装を行うこと。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d79" href="#d79">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">6メソッドの行数制限について</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">上</span><span style="color: #000000; background-color: #efcb05; ">記</span><span style="color: #000000; background-color: #efcb05; ">の</span><span style="color: #000000; background-color: #efcb05; ">ように</span><span style="color: #000000; background-color: #efcb05; ">記述</span><span style="color: #000000; background-color: #efcb05; ">する</span><span style="color: #000000; background-color: #efcb05; ">と</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">using</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span style="color: #000000; background-color: #efcb05; ">ス</span><span class="sf17b16">テ</span><span style="color: #000000; background-color: #efcb05; ">ー</span><span class="sf17b16">トメ</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span class="sf17b16">ト</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">（）</span><span style="color: #000000; background-color: #efcb05; ">で</span><span class="sf17b16">インスタンス化し</span><span style="color: #000000; background-color: #efcb05; ">た</span><span style="color: #000000; background-color: #efcb05; ">オブジェクト</span><span class="sf17b16">は</span><span style="color: #000000; background-color: #efcb05; ">ス</span><span style="color: #000000; background-color: #efcb05; ">コー</span><span style="color: #000000; background-color: #efcb05; ">プ</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">外</span><span style="color: #000000; background-color: #efcb05; ">れ</span><span style="color: #000000; background-color: #efcb05; ">た</span><span class="sf17b16">瞬間</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">自<wbr>動的</span><span style="color: #000000; background-color: #efcb05; ">に</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">Dispose</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">メソッド</span><span style="color: #000000; background-color: #efcb05; ">が</span><span class="sf17b16">呼び出</span><span style="color: #000000; background-color: #efcb05; ">され</span><span class="sf17b16">参照</span><span style="color: #000000; background-color: #efcb05; ">が</span><span style="color: #000000; background-color: #efcb05; ">破棄</span><span class="sf17b16">され</span><span style="color: #000000; background-color: #efcb05; ">る</span><span style="color: #000000; background-color: #efcb05; ">ように</span><span style="color: #000000; background-color: #efcb05; ">な</span><span style="color: #000000; background-color: #efcb05; ">る。</span><span style="color: #000000; background-color: #efcb05; ">こ</span><span class="sf17b16">れ</span><span style="color: #000000; background-color: #efcb05; ">は </span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">NETFramework1</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">1</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span style="color: #000000; background-color: #efcb05; ">の</span><span style="color: #000000; background-color: #efcb05; ">段階では </span><span class="sf17b16">C#</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">み</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">機</span><span style="color: #000000; background-color: #efcb05; ">能</span><span class="sf17b16">[[6]](#footnote-6)であ</span><span style="color: #000000; background-color: #efcb05; ">る。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; メソッドは業務開発時には業務仕様に忠実に実装しようとするあまり、冗長になり、気<wbr>がつくとひとつのメソッドが数百行におよび、膨大な数のローカル変数が定義され、メ<wbr>ンテナンス性を著しく悪化させる場合が多々見受けられる。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; 本コーディング規約のver1.0 では「型プレフィックスを変数名に必ず付与する」としており、これは、冗長なコード<wbr>を少しでも読みやすくしようとする努力の一環ではあるが、問題の根本的な解決とはい<wbr>いがたい。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; ver1.1 からは「型プレフィックスの廃止」を強制することで、冗長なメソッドの排除を目指し<wbr>ている。メソッドは可能な限り単機能で</span><span style="color: #000000; background-color: #efcb05; ">記</span><span class="sf17b18">述し、そ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b18">行数は最高でも100 行を超えない</span><span style="color: #000000; background-color: #efcb05; ">ように</span><span class="sf17b18">するべきである。どうしても100 行を超えるような</span><span style="color: #000000; background-color: #efcb05; ">記述</span><span class="sf17b18">を行う必要がある場合には、有識者に意見を求め、なるべく少な<wbr>い行数でメソッドそのものの記述を行えるように</span><span style="color: #000000; background-color: #efcb05; ">する</span><span class="sf17b18">こ</span><span style="color: #000000; background-color: #efcb05; ">と</span><span class="sf17b18">。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">1</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">型プレフィックスとは</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b18">string 型の変数を宣言する際に strXX などのように型名が類推できるプレフィック</span><span style="color: #000000; background-color: #efcb05; ">ス</span><span class="sf17b16">である。このような記法をハンガリアン<wbr>記法と呼び、一昔前のコ</span><span style="color: #000000; background-color: #efcb05; ">ー</span><span class="sf17b16">ディ</span><span style="color: #000000; background-color: #efcb05; ">ン</span><span class="sf17b16">グではこ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">記法が一般的</span><span style="color: #000000; background-color: #efcb05; ">で</span><span class="sf17b16">あっ</span><span style="color: #000000; background-color: #efcb05; ">た</span><span class="sf17b18">。昨今の</span><span style="color: #000000; background-color: #efcb05; ">オブジェク<wbr>ト</span><span class="sf17b16">指向的なコーディング、デザインパターンの普及などに伴い、型プレフィック</span><span style="color: #000000; background-color: #efcb05; ">ス</span><span class="sf17b18">を使<wbr>用せざるを得ないほどひとつのメソッドが長くなることがほとんど無くなった。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">&nbsp; 型プレフィックスを使用しないと可読性が悪化するような冗長な</span><span style="color: #000000; background-color: #efcb05; ">コー</span><span class="sf17b18">ドを記述させない<wbr>意味で、本規約では使用を禁ずるものとしている。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2 WindowsForm のア</span><span style="color: #000000; background-color: #efcb05; ">プ</span><span class="sf17b18">リケーションの場合、Application_ThreadExceptio<wbr>n ハンドラや AppDomain.CurrentDomain_UnhandledExcept<wbr>ion イベントハンドラなどがこれにあたる。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">その Application および AppDomain 内で発生した未処理の例外</span><span style="color: #000000; background-color: #efcb05; ">を</span><span class="sf17b16">捕捉することができる。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">ASP.NET では Page_OnError イベントハンドラがこ</span><span style="color: #000000; background-color: #efcb05; ">れ</span><span class="sf17b18">にあ</span><span style="color: #000000; background-color: #efcb05; ">た</span><span class="sf17b16">る。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">3 Common Language Runtime の略語。共通言語ランタイムと訳される。.NET Framework の基盤技術の一つで、VB6, VC6 の時代</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b16">言語ごと</span><span style="color: #000000; background-color: #efcb05; ">に</span><span class="sf17b18">必要だったランタイムを廃止し、全ての言語で共通のランタイムを<wbr>使用できるようにしたもの。.NET</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">Framework</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b16">を使用して作成されたアプリケーション、dll の実行環境。この技術により、.NET Framework </span><span style="color: #000000; background-color: #efcb05; ">が</span><span class="sf17b16">インストール</span><span style="color: #000000; background-color: #efcb05; ">され</span><span class="sf17b16">ているマシン上では .NET Framework を使用して作成されたアプリケーションは言語ごとに個別のランタイムをインストール<wbr>することなく動作するようになった。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">4 .NETFramework </span><span style="color: #000000; background-color: #efcb05; ">が</span><span class="sf17b18">持つ自動メモリ管理システム。CLR 上で動作するアプリケーションはオブジェクトの生成、</span><span style="color: #000000; background-color: #efcb05; ">破棄</span><span class="sf17b16">によ</span><span style="color: #000000; background-color: #efcb05; ">る</span><span class="sf17b18">メモリ領域の確保、<wbr>解放を自動で行う。C言語やC++ などの</span><span style="color: #000000; background-color: #efcb05; ">ように</span><span class="sf17b18">開発者が独自にメモリ領域の確保、解放を意識してコーディングを行う必<wbr>要は</span><span style="color: #000000; background-color: #efcb05; ">な</span><span class="sf17b18">い。このメモリの解放の処理を行うのがガベージコレクタであ</span><span style="color: #000000; background-color: #efcb05; ">る。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">5 Framework Class Library の略称。.NETFramework の持つクラスライブラリの</span><span style="color: #000000; background-color: #efcb05; ">こ</span><span class="sf17b16">と</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">6 .NET Framework2.0 以降で</span><span style="color: #000000; background-color: #efcb05; ">は </span><span class="sf17b18">VB</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">NET にも using ステートメントが実装されている。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">7 MSIL とも呼ばれる Microsoft Intermediate Language の略。中間言語とも呼ばれる。C#, VB</span><span style="color: #000000; background-color: #efcb05; ">.</span><span class="sf17b16">NET</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b18">など全て</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b18">&nbsp;.NET 対応の言語でコンパイルされたアセンブリは、コンパイル</span><span style="color: #000000; background-color: #efcb05; ">段階では </span><span class="sf17b16">IL</span><span style="color: #000000; background-color: #efcb05; ">&nbsp;</span><span class="sf17b18">に変換されているに過ぎない。CLR はこ</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">&nbsp;IL にコンパイルされたアセンブリをリコンパイルしてバイナリなど</span><span style="color: #000000; background-color: #efcb05; ">の</span><span class="sf17b16">実行可</span><span style="color: #000000; background-color: #efcb05; ">能</span><span class="sf17b16">な状態に変<wbr>換す</span><span style="color: #000000; background-color: #efcb05; ">る。</span><span class="sf17b18">つまり共通言語ランタイムは IL を実行するためのランタイムになる。</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">---------------</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d80" href="#d80">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">-</span><span class="sf17b16">--------------------------------------<wbr>---------------------</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">コンパイラは using ステートメントを発見すると自動的に Dispose を意味する IL[[7]](#footnote</span><span style="color: #000000; background-color: #efcb05; ">-</span><span class="sf17b16">7) 命令を生成するため、実行結果は例外処理構文を使用した場合とまったく同じになる。<wbr>IDisposable インタフェースを実装するクラスを使用するときには必ず using ステートメントを使用して実装を行うこと。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d81" href="#d81">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">---------------</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16"># 6メソッドの行数制限について</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d82" href="#d82">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">---------------------------------------<wbr>---------------------</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">メソッドは業務開発時には業務仕様に忠実に実装しようとするあまり、冗長になり、気<wbr>がつくとひとつのメソッドが数百行におよび、膨大な数のローカル変数が定義され、メ<wbr>ンテナンス性を著しく悪化させる場合が多々見受けられる。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d83" href="#d83">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">本コーディング規約のver1.0 では「型プレフィックスを変数名に必ず付与する」としており、これは、冗長なコード<wbr>を少しでも読みやすくしようとする努力の一環ではあるが、問題の根本的な解決とはい<wbr>いがたい。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d84" href="#d84">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">ver1.1 からは「型プレフィックスの廃止」を強制することで、冗長なメソッドの排除を目指し<wbr>ている。メソッドは可能な限り単機能で記述し、その行数は最高でも100 行を超えないようにするべきである。どうしても100 行を超えるような記述を行う必要がある場合には、有識者に意見を求め、なるべく少な<wbr>い行数でメソッドそのものの記述を行えるようにすること。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d85" href="#d85">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">1. 型プレフィックスとは string 型の変数を宣言する際に strXX などのように型名が類推できるプレフィックスである。このような記法をハンガリアン<wbr>記法と呼び、一昔前のコーディングではこの記法が一般的であった。昨今のオブジェク<wbr>ト指向的なコーディング、デザインパターンの普及などに伴い、型プレフィックスを使<wbr>用せざるを得ないほどひとつのメソッドが長くなることがほとんど無くなった。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d86" href="#d86">.</a></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">15</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b16">&nbsp; &nbsp;型プレフィックスを使用しないと可読性が悪化するような冗長なコードを記述させない<wbr>意味で、本規約では使用を禁ずるものとしている。 [↑](#footnote-ref-1)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span class="sf17b18">2. WindowsForm のアプリケーションの場合、Application\_ThreadExcepti<wbr>on ハンドラや AppDomain.CurrentDomain\_UnhandledExcep<wbr>tion イベントハンドラなどがこれにあたる。</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d87" href="#d87">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; &nbsp;その Application および AppDomain 内で発生した未処理の例外を捕捉することができる。</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a id="d88" href="#d88">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">&nbsp; &nbsp;ASP.NET では Page\_OnError イベントハンドラがこれにあたる。 [↑](#footnote-ref-2)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">3. Common Language Runtime の略語。共通言語ランタイムと訳される。.NET Framework の基盤技術の一つで、VB6, VC6 の時代に言語ごとに必要だったランタイムを廃止し、全ての言語で共通のランタイムを<wbr>使用できるようにしたもの。.NET Framework を使用して作成されたアプリケーション、dll の実行環境。この技術により、.NET Framework がインストールされているマシン上では .NET Framework を使用して作成されたアプリケーションは言語ごとに個別のランタイムをインストール<wbr>することなく動作するようになった。 [↑](#footnote-ref-3)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">4. .NETFramework が持つ自動メモリ管理システム。CLR 上で動作するアプリケーションはオブジェクトの生成、破棄によるメモリ領域の確保、<wbr>解放を自動で行う。C言語やC++ などのように開発者が独自にメモリ領域の確保、解放を意識してコーディングを行う必<wbr>要はない。このメモリの解放の処理を行うのがガベージコレクタである。 [↑](#footnote-ref-4)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">5. Framework Class Library の略称。.NETFramework の持つクラスライブラリのこと [↑](#footnote-ref-5)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">6. .NET Framework2.0 以降では VB.NET にも using ステートメントが実装されている。 [↑](#footnote-ref-6)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #efcb05; "><code><span style="color: #000000; background-color: #efcb05; ">7. MSIL とも呼ばれる Microsoft Intermediate Language の略。中間言語とも呼ばれる。C#, VB.NET など全ての .NET 対応の言語でコンパイルされたアセンブリは、コンパイル段階では IL に変換されているに過ぎない。CLR はこの IL にコンパイルされたアセンブリをリコンパイルしてバイナリなどの実行可能な状態に変<wbr>換する。つまり共通言語ランタイムは IL を実行するためのランタイムになる。 [↑](#footnote-ref-7)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
</tbody>
</table>
</body>
</html>
